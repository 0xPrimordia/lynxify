/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** General statistics */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Total sauce in circulation in its smallest unit
                             * @example 526531284317600
                             */
                            circulatingSauce?: string;
                            /**
                             * @description Total swaps across all pools since inception
                             * @example 1600796
                             */
                            swapTotal?: number;
                            /**
                             * @description Total value locked priced in Tinybar
                             * @example 55577479377624950
                             */
                            tvl?: string;
                            /**
                             * Format: float
                             * @description Total value locked in USD
                             * @example 26773811.729033
                             */
                            tvlUsd?: number;
                            /**
                             * @description Total trading volume since inception priced in Tinybar
                             * @example 372768795310667371
                             */
                            volumeTotal?: string;
                            /**
                             * Format: float
                             * @description Total volume in USD
                             * @example 220524200.282553
                             */
                            volumeTotalUsd?: number;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stats/sss": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Single-Sided Staking statistics */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: float
                             * @description 5-day average APR
                             * @example 0.0462
                             */
                            avg5day?: number;
                            /** @example 146206 */
                            id?: number;
                            /**
                             * Format: float
                             * @description XSAUCE to SAUCE ratio
                             * @example 1.1172
                             */
                            ratio?: number;
                            /**
                             * @description SAUCE amount in its smallest unit
                             * @example 242601707456381
                             */
                            sauce?: string;
                            /**
                             * @description Unix timestamp in seconds
                             * @example 1697616900
                             */
                            timestampSeconds?: number;
                            /**
                             * @description XSAUCE amount in its smallest unit
                             * @example 217150119725425
                             */
                            xsauce?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stats/hbarHistoricalPrices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get historical HBAR price data (minutely) */
        get: {
            parameters: {
                query: {
                    /** @description From Unix seconds */
                    from: number;
                    /** @description To Unix seconds */
                    to: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 548294 */
                            id?: number;
                            /** @example 0.04830379666666667 */
                            priceUsd?: number;
                            /** @example 1697599980 */
                            timestampSeconds?: number;
                        }[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stats/platformData": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get platform historical liquidity or volume data */
        get: {
            parameters: {
                query: {
                    /** @description From Unix seconds */
                    from: number;
                    /** @description To Unix seconds */
                    to: number;
                    interval: "HOUR" | "DAY" | "WEEK";
                    field: "LIQUIDITY" | "VOLUME";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description value in Tinybar
                             * @example 46701854905030720
                             */
                            valueHbar?: string;
                            /** @example 1697598000 */
                            timestampSeconds?: number;
                        }[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/farms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of active farms */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Farm"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/farms/totals/{accountId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get LP token amounts in farms by account id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    accountId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FarmAccount"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get compact token data */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TokenCompact"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/full": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get detailed token data */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Token"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/{tokenId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get detailed token data by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    tokenId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Token"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/known": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get default listed token data */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Token"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/default": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get hourly, daily and weekly price change for default listed tokens */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TokenStats"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/price-change": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a mapping of tokenId to 24-hours price change percentage */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TokenPriceChange"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/daily": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get daily price, volume and liquidity for all tokens */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TokenPVL"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/weekly": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get weekly price, volume and liquidity for all tokens */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TokenPVL"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/monthly": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get monthly price, volume and liquidity for all tokens */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TokenPVL"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/yearly": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get yearly price, volume and liquidity for all tokens */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TokenPVL"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/daily/{tokenId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get daily price, volume and liquidity for token by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    tokenId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TokenPVL"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/weekly/{tokenId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get weekly price, volume and liquidity for token by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    tokenId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TokenPVL"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/monthly/{tokenId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get monthly price, volume and liquidity for token by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    tokenId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TokenPVL"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/yearly/{tokenId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get yearly price, volume and liquidity for token by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    tokenId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TokenPVL"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/associated-pools/{tokenId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get associated pools containing the token by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    tokenId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Pool"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/prices/{tokenId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get historical candlestick data for token by id */
        get: {
            parameters: {
                query: {
                    /** @description From Unix seconds */
                    from: number;
                    /** @description To Unix seconds */
                    to: number;
                    interval: "FIVEMIN" | "HOUR" | "DAY" | "WEEK";
                };
                header?: never;
                path: {
                    tokenId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TokenCandlestickData"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/prices/latest/{tokenId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the latest candlestick data for token by id */
        get: {
            parameters: {
                query: {
                    interval: "FIVEMIN" | "HOUR" | "DAY" | "WEEK";
                };
                header?: never;
                path: {
                    tokenId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TokenCandlestickData"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/prices/usd/{tokenId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get USD price history for a token by id */
        get: {
            parameters: {
                query: {
                    /** @description From Unix seconds */
                    from: number;
                    /** @description To Unix seconds */
                    to: number;
                    interval: "FIVEMIN" | "HOUR" | "DAY" | "WEEK";
                };
                header?: never;
                path: {
                    tokenId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: float
                             * @example 0.017734458589574
                             */
                            priceUsd?: number;
                            /** @example 1697601600 */
                            timestampSeconds?: number;
                        }[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get compact data for all pools */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PoolCompact"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pools/full": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get detailed data for all pools */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Pool"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pools/{poolId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get detailed data for a pool by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    poolId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Pool"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pools/known": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get default listed pool data */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Pool"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pools/daily": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get daily volume and liquidity for pools */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PoolVL"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pools/weekly": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get weekly volume and liquidity for pools */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PoolVL"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pools/monthly": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get monthly volume and liquidity for pools */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PoolVL"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pools/yearly": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get yearly volume and liquidity for pools */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PoolVL"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pools/daily/{poolId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get daily volume and liquidity for a pool by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    poolId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PoolVL"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pools/weekly/{poolId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get weekly volume and liquidity for a pool by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    poolId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PoolVL"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pools/monthly/{poolId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get monthly volume and liquidity for pool by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    poolId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PoolVL"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pools/yearly/{poolId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get yearly volume and liquidity for pool by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    poolId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PoolVL"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pools/conversionRates/{poolId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get historical candlestick data for pool by id */
        get: {
            parameters: {
                query: {
                    /** @description From Unix seconds */
                    from: number;
                    /** @description To Unix seconds */
                    to: number;
                    /** @description Data interval */
                    interval: "FIVEMIN" | "HOUR" | "DAY" | "WEEK";
                    inverted?: boolean;
                };
                header?: never;
                path: {
                    /** @description Pool ID */
                    poolId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CandlestickData"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pools/conversionRates/latest/{poolId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the latest candlestick data for pool by id */
        get: {
            parameters: {
                query: {
                    /** @description Data interval */
                    interval: "FIVEMIN" | "HOUR" | "DAY" | "WEEK";
                    inverted?: boolean;
                };
                header?: never;
                path: {
                    /** @description Pool ID */
                    poolId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CandlestickData"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/pools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get compact data for all SaucerSwap V2 pools */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PoolV2Compact"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/pools/full": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get detailed data for all SaucerSwap V2 pools */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PoolV2"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/pools/{poolId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get detailed data for a SaucerSwap V2 pool by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    poolId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PoolV2"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/nfts/{accountId}/positions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all liquidity positions by account id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Hedera account id */
                    accountId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PositionV2"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Farm: {
            /** @example 14 */
            id: number;
            /** @example 35 */
            poolId: number;
            /**
             * Format: float
             * @example 2.3062
             */
            sauceEmissions: number;
            /**
             * Format: float
             * @example 0.0103
             */
            hbarEmissions: number;
            /** @example 955338445589 */
            totalStaked: string;
        };
        FarmAccount: {
            /** @example 14 */
            farmId: number;
            /** @example 35 */
            poolId: number;
            /** @example 0.0.12345 */
            accountId: string;
            /**
             * Format: float
             * @example 1682469351.387795003
             */
            timestamp: number;
            /**
             * @description Staked LP amount in its smallest unit
             * @example 95533844
             */
            staked: string;
        };
        Pool: {
            /** @example 213 */
            id: number;
            /** @example 0.0.1465865 */
            contractId: string;
            lpToken: components["schemas"]["LPToken"];
            /**
             * @description LP token reserve in its smallest unit
             * @example 23490447137584
             */
            lpTokenReserve: string;
            tokenA: components["schemas"]["TokenA"];
            /**
             * @description Token A reserve in its smallest unit
             * @example 25185652046087
             */
            tokenReserveA: string;
            tokenB: components["schemas"]["TokenB"];
            /**
             * @description Token B reserve in its smallest unit
             * @example 22634187941347
             */
            tokenReserveB: string;
        };
        PoolCompact: {
            /** @example 213 */
            id: number;
            /** @example 0.0.1465865 */
            contractId: string;
            lpToken: components["schemas"]["LPToken"];
            /**
             * @description LP token reserve in its smallest unit
             * @example 23490447137584
             */
            lpTokenReserve: string;
            tokenA: components["schemas"]["TokenACompact"];
            /**
             * @description Token A reserve in its smallest unit
             * @example 25185652046087
             */
            tokenReserveA: string;
            tokenB: components["schemas"]["TokenBCompact"];
            /**
             * @description Token B reserve in its smallest unit
             * @example 22634187941347
             */
            tokenReserveB: string;
        };
        PoolV2: {
            /** @example 1 */
            id: number;
            /** @example 0.0.3948521 */
            contractId: string;
            /** @example {
             *       "decimals": 6,
             *       "icon": "/images/tokens/usdc.png",
             *       "id": "0.0.456858",
             *       "name": "USD Coin",
             *       "price": "1678944894",
             *       "priceUsd": 1.00375771,
             *       "symbol": "USDC",
             *       "dueDiligenceComplete": true,
             *       "isFeeOnTransferToken": false,
             *       "description": "USDC is a fully collateralized U.S. dollar stablecoin. USDC is the bridge between dollars and trading on cryptocurrency exchanges...",
             *       "website": "https://www.circle.com/en/usdc-multichain/hedera",
             *       "twitterHandle": "circle",
             *       "timestampSecondsLastListingChange": 0
             *     } */
            tokenA: components["schemas"]["TokenA"];
            /** @example {
             *       "decimals": 6,
             *       "icon": "/images/tokens/usdc.png",
             *       "id": "0.0.1055459",
             *       "name": "USD Coin",
             *       "price": "1681384187",
             *       "priceUsd": 1.00521604,
             *       "symbol": "USDC[hts]",
             *       "dueDiligenceComplete": true,
             *       "isFeeOnTransferToken": false,
             *       "description": "USDC is a fully collateralized U.S. dollar stablecoin...",
             *       "website": "https://www.circle.com/en/usdc-multichain/ethereum",
             *       "twitterHandle": "circle",
             *       "timestampSecondsLastListingChange": 0
             *     } */
            tokenB: components["schemas"]["TokenB"];
            /**
             * @description Total amount for token A
             * @example 6313040
             */
            amountA: string;
            /**
             * @description Total amount for token B
             * @example 6313042
             */
            amountB: string;
            /**
             * @description Swap fee tier for the pool, denoted in basis points
             * @example 500
             */
            fee: number;
            /**
             * @description Encoded square root of price ratio between tokens in the pool as a Q64.96 number
             * @example 79228162514992909706099547250
             */
            sqrtRatioX96: string;
            /**
             * @description Current active tick index, representing a specific price point in the pool
             * @example 0
             */
            tickCurrent: number;
            /**
             * @description Total liquidity for the pool
             * @example 10878982596
             */
            liquidity: string;
        };
        PoolV2Compact: {
            /** @example 1 */
            id: number;
            /** @example 0.0.3948521 */
            contractId: string;
            /** @example {
             *       "decimals": 6,
             *       "icon": "/images/tokens/usdc.png",
             *       "id": "0.0.456858",
             *       "name": "USD Coin",
             *       "price": "1678944894",
             *       "priceUsd": 1.00375771,
             *       "symbol": "USDC",
             *       "dueDiligenceComplete": true,
             *       "isFeeOnTransferToken": false
             *     } */
            tokenA: components["schemas"]["TokenACompact"];
            /** @example {
             *       "decimals": 6,
             *       "icon": "/images/tokens/usdc.png",
             *       "id": "0.0.1055459",
             *       "name": "USD Coin",
             *       "price": "1681384187",
             *       "priceUsd": 1.00521604,
             *       "symbol": "USDC[hts]",
             *       "dueDiligenceComplete": true,
             *       "isFeeOnTransferToken": false
             *     } */
            tokenB: components["schemas"]["TokenBCompact"];
            /**
             * @description Total amount for token A
             * @example 6313040
             */
            amountA: string;
            /**
             * @description Total amount for token B
             * @example 6313042
             */
            amountB: string;
            /**
             * @description Swap fee tier for the pool, denoted in basis points
             * @example 500
             */
            fee: number;
            /**
             * @description Encoded square root of price ratio between tokens in the pool as a Q64.96 number
             * @example 79228162514992909706099547250
             */
            sqrtRatioX96: string;
            /**
             * @description Current active tick index, representing a specific price point in the pool
             * @example 0
             */
            tickCurrent: number;
            /**
             * @description Total liquidity for the pool
             * @example 10878982596
             */
            liquidity: string;
        };
        PositionV2: {
            /**
             * @description NFT serial number representing user's position
             * @example 160
             */
            tokenSN: number;
            /**
             * @description Hedera account id
             * @example 0.0.12345
             */
            accountId: string;
            /**
             * @description True if this position was deleted otherwise false
             * @example false
             */
            deleted: boolean;
            /**
             * @description Unix timestamp when this position was created
             * @example 1697779560.762467685
             */
            createdAt: string;
            /**
             * @description Unix timestamp when this position was updated
             * @example 1698287867.747005303
             */
            updatedAt: string;
            /** @example {
             *       "decimals": 8,
             *       "icon": "/images/tokens/hbar.png",
             *       "id": "0.0.59042",
             *       "name": "WHBAR [new]",
             *       "price": "100000000",
             *       "priceUsd": 0.0598982,
             *       "symbol": "HBAR",
             *       "dueDiligenceComplete": true,
             *       "isFeeOnTransferToken": false,
             *       "description": "Hedera is a public, open source, proof-of-stake network, with native cryptocurrency HBAR...",
             *       "website": "https://hedera.com/",
             *       "twitterHandle": "hedera",
             *       "timestampSecondsLastListingChange": 0
             *     } */
            token0: components["schemas"]["Token"];
            /** @example {
             *       "decimals": 6,
             *       "icon": "/images/tokens/sauce.png",
             *       "id": "0.0.61266",
             *       "name": "SAUCE",
             *       "price": "24609831",
             *       "priceUsd": 0.0147408436767304,
             *       "symbol": "SAUCE",
             *       "dueDiligenceComplete": true,
             *       "isFeeOnTransferToken": false,
             *       "description": "SaucerSwap is an open source and non-custodial AMM protocol native to Hedera...",
             *       "website": "https://www.saucerswap.finance/",
             *       "twitterHandle": "SaucerSwapLabs",
             *       "timestampSecondsLastListingChange": 1
             *     } */
            token1: components["schemas"]["Token"];
            /**
             * @description Swap fee tier denoted in basis points
             * @example 3000
             */
            fee: number;
            /**
             * @description Upper end of the position's price range
             * @example -1620
             */
            tickUpper: number;
            /**
             * @description Lower end of the position's price range
             * @example -2820
             */
            tickLower: number;
            /**
             * @description The amount of liquidity provided by the position
             * @example 3249809842
             */
            liquidity: string;
            /**
             * @description Accumulated fee growth for token0 inside the tick range since the last time liquidity was added or removed
             * @example 2546890053379859378523505791149585
             */
            feeGrowthInside0LastX128: string;
            /**
             * @description Accumulated fee growth for token1 inside the tick range since the last time liquidity was added or removed
             * @example 1232345435623984092384092380932840
             */
            feeGrowthInside1LastX128: string;
            /**
             * @description Total amount of token0 owed to the position due to fees generated from swaps within the position's price range
             * @example 10
             */
            tokensOwed0: string;
            /**
             * @description Total amount of token1 owed to the position due to fees generated from swaps within the position's price range
             * @example 20
             */
            tokensOwed1: string;
        };
        /** @example {
         *       "id": "0.0.1465866",
         *       "name": "SS-LP SAUCE - XSAUCE",
         *       "symbol": "SAUCE - XSAUCE",
         *       "decimals": 8,
         *       "priceUsd": 3.7760690082569948
         *     } */
        LPToken: components["schemas"]["TokenSimple"];
        /** @example {
         *       "id": "0.0.731861",
         *       "name": "SAUCE",
         *       "symbol": "SAUCE",
         *       "decimals": 6,
         *       "priceUsd": 0.01760954,
         *       "description": "SaucerSwap is an open source and non-custodial AMM protocol native to Hedera.",
         *       "website": "https://www.saucerswap.finance/",
         *       "sentinelReport": "https://sentinel.headstarter.org/details/saucerswap",
         *       "twitterHandle": "SaucerSwapLabs",
         *       "timestampSecondsLastListingChange": 0
         *     } */
        TokenA: components["schemas"]["Token"];
        /** @example {
         *       "id": "0.0.731861",
         *       "name": "SAUCE",
         *       "symbol": "SAUCE",
         *       "decimals": 6,
         *       "priceUsd": 0.01760954
         *     } */
        TokenACompact: components["schemas"]["TokenCompact"];
        /** @example {
         *       "id": "0.0.1460200",
         *       "name": "xSAUCE",
         *       "symbol": "XSAUCE",
         *       "decimals": 6,
         *       "priceUsd": 0.01959459,
         *       "description": "SaucerSwap is an open source and non-custodial AMM protocol native to Hedera.",
         *       "website": "https://www.saucerswap.finance/",
         *       "sentinelReport": "https://sentinel.headstarter.org/details/saucerswap",
         *       "twitterHandle": "SaucerSwapLabs",
         *       "timestampSecondsLastListingChange": 0
         *     } */
        TokenB: components["schemas"]["Token"];
        /** @example {
         *       "id": "0.0.1460200",
         *       "name": "xSAUCE",
         *       "symbol": "XSAUCE",
         *       "decimals": 6,
         *       "priceUsd": 0.01959459
         *     } */
        TokenBCompact: components["schemas"]["TokenCompact"];
        TokenSimple: {
            /** @example 0.0.731861 */
            id: string;
            /** @example SAUCE */
            name: string;
            /** @example SAUCE */
            symbol: string;
            /** @example 6 */
            decimals: number;
            /**
             * Format: float
             * @example 0.01760954
             */
            priceUsd: number;
        };
        Token: {
            /** @example 0.0.731861 */
            id: string;
            /** @example SAUCE */
            name: string;
            /** @example SAUCE */
            symbol: string;
            /** @example /images/tokens/sauce.svg */
            icon: string;
            /** @example 6 */
            decimals: number;
            /** @example 36806544 */
            price: string;
            /** @example 0.01763457 */
            priceUsd: number;
            /** @example true */
            dueDiligenceComplete: boolean;
            /** @example false */
            isFeeOnTransferToken: boolean;
            /** @example SaucerSwap is an open source and non-custodial AMM protocol native to Hedera. */
            description: string;
            /** @example https://www.saucerswap.finance/ */
            website: string;
            /** @example https://sentinel.headstarter.org/details/saucerswap */
            sentinelReport: string;
            /** @example SaucerSwapLabs */
            twitterHandle: string;
            /** @example 0 */
            timestampSecondsLastListingChange: number;
        };
        TokenCompact: {
            /** @example 0.0.731861 */
            id: string;
            /** @example /images/tokens/sauce.svg */
            icon: string;
            /** @example SAUCE */
            symbol: string;
            /** @example 6 */
            decimals: number;
            /** @example 36806544 */
            price: string;
            /**
             * Format: float
             * @example 0.01760954
             */
            priceUsd: number;
            /** @example true */
            dueDiligenceComplete: boolean;
            /** @example false */
            isFeeOnTransferToken: boolean;
        };
        TokenStats: {
            /** @example 0.0.731861 */
            id: string;
            /** @example SAUCE */
            symbol: string;
            /**
             * Format: float
             * @example 0.0177
             */
            priceUsd: number;
            /**
             * Format: float
             * @example 2880053.73
             */
            liquidityUsd: number;
            /**
             * Format: float
             * @example 0.01
             */
            priceChangeHour: number;
            /**
             * Format: float
             * @example 0.04
             */
            priceChangeDay: number;
            /**
             * Format: float
             * @example 0.11
             */
            priceChangeWeek: number;
        };
        PoolVolume: {
            /** @example 1 */
            id: number;
            /**
             * Format: float
             * @description Pool volume in its smallest unit
             * @example 12390912309
             */
            volume: number;
        };
        PoolVL: {
            /** @example 502 */
            poolId: number;
            /** @example 1697760000 */
            timestampSeconds: number;
            /**
             * @description Pool liquidity in its smallest unit
             * @example 1268297620467
             */
            liquidity: string;
            /**
             * @description Pool volume in its smallest unit
             * @example 178297285042
             */
            volume: string;
        };
        TokenPVL: {
            /**
             * @description Unix seconds
             * @example 1697677200
             */
            timestampSeconds: number;
            /**
             * @description Token ID
             * @example 0.0.731861
             */
            tokenId: string;
            /** @example 36334886 */
            price: string;
            /**
             * @description Token liquidity in its smallest unit
             * @example 5971792596548121
             */
            liquidity: string;
            /**
             * @description Token volume in its smallest unit
             * @example 100169644699152
             */
            volume: string;
        };
        CandlestickData: {
            /** @example 2 */
            id: number;
            /** @example 1 */
            poolId: number;
            /** @example 0.0482115316666979 */
            open: number;
            /** @example 0.0482115316666979 */
            high: number;
            /** @example 0.04819650172584323 */
            low: number;
            /** @example 0.04819650172584323 */
            close: number;
            /** @example 118.56339424557434 */
            avg: number;
            /** @example 0 */
            volume: string;
            /** @example 9668737245792 */
            liquidity: string;
            /** @example 0 */
            volumeUsd: string;
            /** @example 4653.53 */
            liquidityUsd: string;
            /** @example 1697618460 */
            timestampSeconds: number;
            /** @example 1697616000 */
            startTimestampSeconds: number;
        };
        TokenCandlestickData: {
            /** @example 83 */
            id: number;
            /** @example 0.0.731861 */
            tokenId: string;
            /** @example 36358807 */
            open: number;
            /**
             * Format: float
             * @example 0.017246927356274498
             */
            openUsd: number;
            /** @example 36370090 */
            high: number;
            /**
             * Format: float
             * @example 0.017248478665373164
             */
            highUsd: number;
            /** @example 36334867 */
            low: number;
            /**
             * Format: float
             * @example 0.0169388611613325
             */
            lowUsd: number;
            /** @example 36353193 */
            close: number;
            /**
             * Format: float
             * @example 0.0169388611613325
             */
            closeUsd: number;
            /**
             * Format: float
             * @example 36347000.92028988
             */
            avg: number;
            /**
             * Format: float
             * @example 0.017085609229304164
             */
            avgUsd: number;
            /** @example 4484168318250 */
            volume: string;
            /** @example 5976854242691456 */
            liquidity: string;
            /**
             * Format: float
             * @example 2110.33
             */
            volumeUsd: number;
            /**
             * Format: float
             * @example 2784930.18
             */
            liquidityUsd: unknown;
            /** @example 1697681880 */
            timestampSeconds: number;
            /** @example 1697673600 */
            startTimestampSeconds: number;
        };
        /** @example {
         *       "0.0.731861": -2.5351798847046836,
         *       "0.0.786931": 4.047875243039449,
         *       "0.0.629591": -12.223518441429796
         *     } */
        TokenPriceChange: {
            [key: string]: number | undefined;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
