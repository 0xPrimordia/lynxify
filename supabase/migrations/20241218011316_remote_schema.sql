

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";





SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."Thresholds" (
    "id" bigint NOT NULL,
    "createdAt" timestamp with time zone DEFAULT "now"() NOT NULL,
    "hederaAccountId" "text",
    "price" numeric,
    "cap" numeric,
    "tokenA" "text",
    "userId" "uuid",
    "isActive" boolean DEFAULT true,
    "tokenB" "text",
    "fee" numeric,
    "lastError" "text",
    "lastChecked" timestamp without time zone,
    "txHash" "text",
    "lastExecutedAt" timestamp without time zone,
    "status" "text" DEFAULT 'pending'::"text",
    "type" "text",
    "consecutiveFailures" bigint DEFAULT '0'::bigint
);


ALTER TABLE "public"."Thresholds" OWNER TO "postgres";


COMMENT ON TABLE "public"."Thresholds" IS 'User Stop-Loss / Buy Order thresholds';



ALTER TABLE "public"."Thresholds" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Thresholds_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."Users" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "hederaAccountId" "text"
);


ALTER TABLE "public"."Users" OWNER TO "postgres";


ALTER TABLE ONLY "public"."Thresholds"
    ADD CONSTRAINT "Thresholds_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."Users"
    ADD CONSTRAINT "Users_pkey" PRIMARY KEY ("id");



CREATE INDEX "idx_thresholds_is_active" ON "public"."Thresholds" USING "btree" ("isActive");



ALTER TABLE ONLY "public"."Thresholds"
    ADD CONSTRAINT "Thresholds_user_id_fkey" FOREIGN KEY ("userId") REFERENCES "public"."Users"("id");



CREATE POLICY "Enable insert for authenticated users only" ON "public"."Thresholds" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "public"."Users" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for users based on user_id" ON "public"."Users" FOR INSERT WITH CHECK ((("auth"."jwt"() ->> 'hederaAccountId'::"text") = "hederaAccountId"));



CREATE POLICY "Enable read access for all users" ON "public"."Thresholds" FOR SELECT USING (true);



CREATE POLICY "Enable update for users based on hederaAccountId" ON "public"."Users" FOR UPDATE USING ((("auth"."uid"() = "id") AND (("auth"."jwt"() ->> 'hederaAccountId'::"text") = "hederaAccountId")));



ALTER TABLE "public"."Thresholds" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."Users" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "user select for owners only" ON "public"."Users" FOR SELECT USING ((("auth"."uid"() = "id") AND (("auth"."jwt"() ->> 'hederaAccountId'::"text") = "hederaAccountId")));





ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";



































































































































































































GRANT ALL ON TABLE "public"."Thresholds" TO "anon";
GRANT ALL ON TABLE "public"."Thresholds" TO "authenticated";
GRANT ALL ON TABLE "public"."Thresholds" TO "service_role";



GRANT ALL ON SEQUENCE "public"."Thresholds_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Thresholds_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Thresholds_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."Users" TO "anon";
GRANT ALL ON TABLE "public"."Users" TO "authenticated";
GRANT ALL ON TABLE "public"."Users" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;

-- Allow service role to bypass RLS
ALTER TABLE "public"."Users" FORCE ROW LEVEL SECURITY;

-- Create policy to allow service role to do all operations
CREATE POLICY "Service role can do all operations"
ON "public"."Users"
FOR ALL
TO service_role
USING (true)
WITH CHECK (true);
