/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IHederaTokenService {
  export type HederaTokenStruct = {
    name: string;
    symbol: string;
    treasury: AddressLike;
    memo: string;
    supplyType: boolean;
    maxSupply: BigNumberish;
    freezeDefault: boolean;
    freezeKey: AddressLike[];
    wipeKey: AddressLike[];
    supplyKey: AddressLike[];
    adminKey: AddressLike[];
    kycKey: AddressLike[];
    decimals: BigNumberish;
  };

  export type HederaTokenStructOutput = [
    name: string,
    symbol: string,
    treasury: string,
    memo: string,
    supplyType: boolean,
    maxSupply: bigint,
    freezeDefault: boolean,
    freezeKey: string[],
    wipeKey: string[],
    supplyKey: string[],
    adminKey: string[],
    kycKey: string[],
    decimals: bigint
  ] & {
    name: string;
    symbol: string;
    treasury: string;
    memo: string;
    supplyType: boolean;
    maxSupply: bigint;
    freezeDefault: boolean;
    freezeKey: string[];
    wipeKey: string[];
    supplyKey: string[];
    adminKey: string[];
    kycKey: string[];
    decimals: bigint;
  };
}

export interface MockHederaTokenServiceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "associateToken"
      | "balanceOf"
      | "burnToken"
      | "createToken"
      | "getMockHtsPrecompile"
      | "getSupplyKeyHolder"
      | "isSupplyKey"
      | "isTokenAssociated"
      | "mintToken"
      | "mockCreateTokenResponse"
      | "mockIsSupplyKey"
      | "setAllowance"
      | "setBalance"
      | "setMintingEnabled"
      | "setMockHtsPrecompile"
      | "setSkipAllowanceChecks"
      | "setSupplyKeyHolder"
      | "setTokenAssociated"
      | "transferToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "TokenAssociated"
      | "TokenBurned"
      | "TokenCreated"
      | "TokenMinted"
      | "TokenTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "associateToken",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burnToken",
    values: [AddressLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createToken",
    values: [
      IHederaTokenService.HederaTokenStruct,
      BigNumberish,
      BigNumberish[],
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMockHtsPrecompile",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplyKeyHolder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupplyKey",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenAssociated",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintToken",
    values: [AddressLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mockCreateTokenResponse",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mockIsSupplyKey",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowance",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBalance",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintingEnabled",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMockHtsPrecompile",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSkipAllowanceChecks",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupplyKeyHolder",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAssociated",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToken",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "associateToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMockHtsPrecompile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupplyKeyHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupplyKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenAssociated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mockCreateTokenResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockIsSupplyKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMintingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMockHtsPrecompile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSkipAllowanceChecks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupplyKeyHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAssociated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToken",
    data: BytesLike
  ): Result;
}

export namespace TokenAssociatedEvent {
  export type InputTuple = [account: AddressLike, token: AddressLike];
  export type OutputTuple = [account: string, token: string];
  export interface OutputObject {
    account: string;
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenBurnedEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenCreatedEvent {
  export type InputTuple = [
    token: AddressLike,
    name: string,
    symbol: string,
    treasury: AddressLike
  ];
  export type OutputTuple = [
    token: string,
    name: string,
    symbol: string,
    treasury: string
  ];
  export interface OutputObject {
    token: string;
    name: string;
    symbol: string;
    treasury: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenMintedEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenTransferredEvent {
  export type InputTuple = [
    token: AddressLike,
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    from: string,
    to: string,
    amount: bigint
  ];
  export interface OutputObject {
    token: string;
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MockHederaTokenService extends BaseContract {
  connect(runner?: ContractRunner | null): MockHederaTokenService;
  waitForDeployment(): Promise<this>;

  interface: MockHederaTokenServiceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [token: AddressLike, owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  associateToken: TypedContractMethod<
    [account: AddressLike, token: AddressLike],
    [bigint],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [bigint],
    "view"
  >;

  burnToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, arg2: BytesLike[]],
    [bigint],
    "nonpayable"
  >;

  createToken: TypedContractMethod<
    [
      token: IHederaTokenService.HederaTokenStruct,
      initialTotalSupply: BigNumberish,
      keys: BigNumberish[],
      keyAddresses: AddressLike[]
    ],
    [[bigint, string] & { responseCode: bigint; tokenAddress: string }],
    "payable"
  >;

  getMockHtsPrecompile: TypedContractMethod<[], [string], "view">;

  getSupplyKeyHolder: TypedContractMethod<
    [token: AddressLike],
    [string],
    "view"
  >;

  isSupplyKey: TypedContractMethod<
    [token: AddressLike, supplyAddress: AddressLike],
    [boolean],
    "view"
  >;

  isTokenAssociated: TypedContractMethod<
    [account: AddressLike, token: AddressLike],
    [boolean],
    "view"
  >;

  mintToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, arg2: BytesLike[]],
    [bigint],
    "nonpayable"
  >;

  mockCreateTokenResponse: TypedContractMethod<
    [responseCode: BigNumberish, tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  mockIsSupplyKey: TypedContractMethod<
    [token: AddressLike, supplyAddress: AddressLike, result: boolean],
    [void],
    "nonpayable"
  >;

  setAllowance: TypedContractMethod<
    [
      token: AddressLike,
      owner: AddressLike,
      spender: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setBalance: TypedContractMethod<
    [token: AddressLike, account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMintingEnabled: TypedContractMethod<
    [token: AddressLike, enabled: boolean],
    [void],
    "nonpayable"
  >;

  setMockHtsPrecompile: TypedContractMethod<
    [_mockHtsPrecompile: AddressLike],
    [void],
    "nonpayable"
  >;

  setSkipAllowanceChecks: TypedContractMethod<
    [skip: boolean],
    [void],
    "nonpayable"
  >;

  setSupplyKeyHolder: TypedContractMethod<
    [token: AddressLike, supplyKeyHolder: AddressLike],
    [void],
    "nonpayable"
  >;

  setTokenAssociated: TypedContractMethod<
    [account: AddressLike, token: AddressLike, associated: boolean],
    [void],
    "nonpayable"
  >;

  transferToken: TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [token: AddressLike, owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "associateToken"
  ): TypedContractMethod<
    [account: AddressLike, token: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "burnToken"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, arg2: BytesLike[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createToken"
  ): TypedContractMethod<
    [
      token: IHederaTokenService.HederaTokenStruct,
      initialTotalSupply: BigNumberish,
      keys: BigNumberish[],
      keyAddresses: AddressLike[]
    ],
    [[bigint, string] & { responseCode: bigint; tokenAddress: string }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getMockHtsPrecompile"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getSupplyKeyHolder"
  ): TypedContractMethod<[token: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "isSupplyKey"
  ): TypedContractMethod<
    [token: AddressLike, supplyAddress: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isTokenAssociated"
  ): TypedContractMethod<
    [account: AddressLike, token: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintToken"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, arg2: BytesLike[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mockCreateTokenResponse"
  ): TypedContractMethod<
    [responseCode: BigNumberish, tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mockIsSupplyKey"
  ): TypedContractMethod<
    [token: AddressLike, supplyAddress: AddressLike, result: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAllowance"
  ): TypedContractMethod<
    [
      token: AddressLike,
      owner: AddressLike,
      spender: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBalance"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMintingEnabled"
  ): TypedContractMethod<
    [token: AddressLike, enabled: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMockHtsPrecompile"
  ): TypedContractMethod<
    [_mockHtsPrecompile: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSkipAllowanceChecks"
  ): TypedContractMethod<[skip: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSupplyKeyHolder"
  ): TypedContractMethod<
    [token: AddressLike, supplyKeyHolder: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenAssociated"
  ): TypedContractMethod<
    [account: AddressLike, token: AddressLike, associated: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferToken"
  ): TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "TokenAssociated"
  ): TypedContractEvent<
    TokenAssociatedEvent.InputTuple,
    TokenAssociatedEvent.OutputTuple,
    TokenAssociatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenBurned"
  ): TypedContractEvent<
    TokenBurnedEvent.InputTuple,
    TokenBurnedEvent.OutputTuple,
    TokenBurnedEvent.OutputObject
  >;
  getEvent(
    key: "TokenCreated"
  ): TypedContractEvent<
    TokenCreatedEvent.InputTuple,
    TokenCreatedEvent.OutputTuple,
    TokenCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenMinted"
  ): TypedContractEvent<
    TokenMintedEvent.InputTuple,
    TokenMintedEvent.OutputTuple,
    TokenMintedEvent.OutputObject
  >;
  getEvent(
    key: "TokenTransferred"
  ): TypedContractEvent<
    TokenTransferredEvent.InputTuple,
    TokenTransferredEvent.OutputTuple,
    TokenTransferredEvent.OutputObject
  >;

  filters: {
    "TokenAssociated(address,address)": TypedContractEvent<
      TokenAssociatedEvent.InputTuple,
      TokenAssociatedEvent.OutputTuple,
      TokenAssociatedEvent.OutputObject
    >;
    TokenAssociated: TypedContractEvent<
      TokenAssociatedEvent.InputTuple,
      TokenAssociatedEvent.OutputTuple,
      TokenAssociatedEvent.OutputObject
    >;

    "TokenBurned(address,uint256)": TypedContractEvent<
      TokenBurnedEvent.InputTuple,
      TokenBurnedEvent.OutputTuple,
      TokenBurnedEvent.OutputObject
    >;
    TokenBurned: TypedContractEvent<
      TokenBurnedEvent.InputTuple,
      TokenBurnedEvent.OutputTuple,
      TokenBurnedEvent.OutputObject
    >;

    "TokenCreated(address,string,string,address)": TypedContractEvent<
      TokenCreatedEvent.InputTuple,
      TokenCreatedEvent.OutputTuple,
      TokenCreatedEvent.OutputObject
    >;
    TokenCreated: TypedContractEvent<
      TokenCreatedEvent.InputTuple,
      TokenCreatedEvent.OutputTuple,
      TokenCreatedEvent.OutputObject
    >;

    "TokenMinted(address,uint256)": TypedContractEvent<
      TokenMintedEvent.InputTuple,
      TokenMintedEvent.OutputTuple,
      TokenMintedEvent.OutputObject
    >;
    TokenMinted: TypedContractEvent<
      TokenMintedEvent.InputTuple,
      TokenMintedEvent.OutputTuple,
      TokenMintedEvent.OutputObject
    >;

    "TokenTransferred(address,address,address,uint256)": TypedContractEvent<
      TokenTransferredEvent.InputTuple,
      TokenTransferredEvent.OutputTuple,
      TokenTransferredEvent.OutputObject
    >;
    TokenTransferred: TypedContractEvent<
      TokenTransferredEvent.InputTuple,
      TokenTransferredEvent.OutputTuple,
      TokenTransferredEvent.OutputObject
    >;
  };
}
