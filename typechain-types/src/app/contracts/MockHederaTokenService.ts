/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface MockHederaTokenServiceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "associateToken"
      | "balanceOf"
      | "burnToken"
      | "getMockHtsPrecompile"
      | "isTokenAssociated"
      | "mintToken"
      | "setAllowance"
      | "setBalance"
      | "setMockHtsPrecompile"
      | "setTokenAssociated"
      | "transferToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "associateToken",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burnToken",
    values: [AddressLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getMockHtsPrecompile",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenAssociated",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintToken",
    values: [AddressLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowance",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBalance",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMockHtsPrecompile",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAssociated",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToken",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "associateToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMockHtsPrecompile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenAssociated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMockHtsPrecompile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAssociated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToken",
    data: BytesLike
  ): Result;
}

export interface MockHederaTokenService extends BaseContract {
  connect(runner?: ContractRunner | null): MockHederaTokenService;
  waitForDeployment(): Promise<this>;

  interface: MockHederaTokenServiceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [token: AddressLike, owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  associateToken: TypedContractMethod<
    [account: AddressLike, token: AddressLike],
    [bigint],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [bigint],
    "view"
  >;

  burnToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, arg2: BytesLike[]],
    [bigint],
    "nonpayable"
  >;

  getMockHtsPrecompile: TypedContractMethod<[], [string], "view">;

  isTokenAssociated: TypedContractMethod<
    [account: AddressLike, token: AddressLike],
    [boolean],
    "view"
  >;

  mintToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, arg2: BytesLike[]],
    [bigint],
    "nonpayable"
  >;

  setAllowance: TypedContractMethod<
    [
      token: AddressLike,
      owner: AddressLike,
      spender: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setBalance: TypedContractMethod<
    [token: AddressLike, account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMockHtsPrecompile: TypedContractMethod<
    [_mockHtsPrecompile: AddressLike],
    [void],
    "nonpayable"
  >;

  setTokenAssociated: TypedContractMethod<
    [account: AddressLike, token: AddressLike, associated: boolean],
    [void],
    "nonpayable"
  >;

  transferToken: TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [token: AddressLike, owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "associateToken"
  ): TypedContractMethod<
    [account: AddressLike, token: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "burnToken"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, arg2: BytesLike[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getMockHtsPrecompile"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isTokenAssociated"
  ): TypedContractMethod<
    [account: AddressLike, token: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintToken"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, arg2: BytesLike[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAllowance"
  ): TypedContractMethod<
    [
      token: AddressLike,
      owner: AddressLike,
      spender: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBalance"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMockHtsPrecompile"
  ): TypedContractMethod<
    [_mockHtsPrecompile: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenAssociated"
  ): TypedContractMethod<
    [account: AddressLike, token: AddressLike, associated: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferToken"
  ): TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  filters: {};
}
