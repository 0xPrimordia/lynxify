/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface LynxMinterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "RATIO_PRECISION"
      | "associateTokens"
      | "checkSupply"
      | "clxyToken"
      | "confirmMint"
      | "getBalance"
      | "getMaxMintableAmount"
      | "lynxToken"
      | "mint"
      | "mintNonce"
      | "owner"
      | "pendingMints"
      | "sauceToken"
      | "totalClxyDeposited"
      | "totalHbarDeposited"
      | "totalLynxMinted"
      | "totalSauceDeposited"
      | "verifySupply"
      | "withdrawHBAR"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DebugCheckSupply"
      | "DebugConfirmMint"
      | "DebugConstructor"
      | "DebugMint"
      | "DebugOwner"
      | "LynxMinted"
      | "MaxMintableUpdated"
      | "SupplyVerified"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "RATIO_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "associateTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "clxyToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "confirmMint",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxMintableAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lynxToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "mintNonce", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingMints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sauceToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalClxyDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalHbarDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalLynxMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSauceDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifySupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawHBAR",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "RATIO_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "associateTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clxyToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "confirmMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMaxMintableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lynxToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingMints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sauceToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalClxyDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalHbarDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLynxMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSauceDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawHBAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace DebugCheckSupplyEvent {
  export type InputTuple = [
    message: string,
    hbarBalance: BigNumberish,
    sauceBalance: BigNumberish,
    clxyBalance: BigNumberish,
    totalLynxMinted: BigNumberish
  ];
  export type OutputTuple = [
    message: string,
    hbarBalance: bigint,
    sauceBalance: bigint,
    clxyBalance: bigint,
    totalLynxMinted: bigint
  ];
  export interface OutputObject {
    message: string;
    hbarBalance: bigint;
    sauceBalance: bigint;
    clxyBalance: bigint;
    totalLynxMinted: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DebugConfirmMintEvent {
  export type InputTuple = [
    message: string,
    sender: AddressLike,
    owner: AddressLike,
    nonce: BigNumberish,
    isPending: boolean
  ];
  export type OutputTuple = [
    message: string,
    sender: string,
    owner: string,
    nonce: bigint,
    isPending: boolean
  ];
  export interface OutputObject {
    message: string;
    sender: string;
    owner: string;
    nonce: bigint;
    isPending: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DebugConstructorEvent {
  export type InputTuple = [
    lynx: AddressLike,
    sauce: AddressLike,
    clxy: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [
    lynx: string,
    sauce: string,
    clxy: string,
    sender: string
  ];
  export interface OutputObject {
    lynx: string;
    sauce: string;
    clxy: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DebugMintEvent {
  export type InputTuple = [
    message: string,
    value1: BigNumberish,
    value2: BigNumberish
  ];
  export type OutputTuple = [message: string, value1: bigint, value2: bigint];
  export interface OutputObject {
    message: string;
    value1: bigint;
    value2: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DebugOwnerEvent {
  export type InputTuple = [
    message: string,
    msgSender: AddressLike,
    contractOwner: AddressLike
  ];
  export type OutputTuple = [
    message: string,
    msgSender: string,
    contractOwner: string
  ];
  export interface OutputObject {
    message: string;
    msgSender: string;
    contractOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LynxMintedEvent {
  export type InputTuple = [
    user: AddressLike,
    hbarAmount: BigNumberish,
    sauceAmount: BigNumberish,
    clxyAmount: BigNumberish,
    lynxMinted: BigNumberish,
    nonce: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    hbarAmount: bigint,
    sauceAmount: bigint,
    clxyAmount: bigint,
    lynxMinted: bigint,
    nonce: bigint
  ];
  export interface OutputObject {
    user: string;
    hbarAmount: bigint;
    sauceAmount: bigint;
    clxyAmount: bigint;
    lynxMinted: bigint;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxMintableUpdatedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SupplyVerifiedEvent {
  export type InputTuple = [
    hbarBalance: BigNumberish,
    sauceBalance: BigNumberish,
    clxyBalance: BigNumberish,
    lynxSupply: BigNumberish
  ];
  export type OutputTuple = [
    hbarBalance: bigint,
    sauceBalance: bigint,
    clxyBalance: bigint,
    lynxSupply: bigint
  ];
  export interface OutputObject {
    hbarBalance: bigint;
    sauceBalance: bigint;
    clxyBalance: bigint;
    lynxSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LynxMinter extends BaseContract {
  connect(runner?: ContractRunner | null): LynxMinter;
  waitForDeployment(): Promise<this>;

  interface: LynxMinterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  RATIO_PRECISION: TypedContractMethod<[], [bigint], "view">;

  associateTokens: TypedContractMethod<[], [void], "nonpayable">;

  checkSupply: TypedContractMethod<[], [boolean], "view">;

  clxyToken: TypedContractMethod<[], [string], "view">;

  confirmMint: TypedContractMethod<
    [nonce: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  getMaxMintableAmount: TypedContractMethod<[], [bigint], "view">;

  lynxToken: TypedContractMethod<[], [string], "view">;

  mint: TypedContractMethod<[amount: BigNumberish], [void], "payable">;

  mintNonce: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingMints: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  sauceToken: TypedContractMethod<[], [string], "view">;

  totalClxyDeposited: TypedContractMethod<[], [bigint], "view">;

  totalHbarDeposited: TypedContractMethod<[], [bigint], "view">;

  totalLynxMinted: TypedContractMethod<[], [bigint], "view">;

  totalSauceDeposited: TypedContractMethod<[], [bigint], "view">;

  verifySupply: TypedContractMethod<[], [boolean], "nonpayable">;

  withdrawHBAR: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "RATIO_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "associateTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkSupply"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "clxyToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "confirmMint"
  ): TypedContractMethod<
    [nonce: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMaxMintableAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lynxToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<[amount: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "mintNonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingMints"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "sauceToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalClxyDeposited"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalHbarDeposited"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalLynxMinted"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSauceDeposited"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "verifySupply"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawHBAR"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DebugCheckSupply"
  ): TypedContractEvent<
    DebugCheckSupplyEvent.InputTuple,
    DebugCheckSupplyEvent.OutputTuple,
    DebugCheckSupplyEvent.OutputObject
  >;
  getEvent(
    key: "DebugConfirmMint"
  ): TypedContractEvent<
    DebugConfirmMintEvent.InputTuple,
    DebugConfirmMintEvent.OutputTuple,
    DebugConfirmMintEvent.OutputObject
  >;
  getEvent(
    key: "DebugConstructor"
  ): TypedContractEvent<
    DebugConstructorEvent.InputTuple,
    DebugConstructorEvent.OutputTuple,
    DebugConstructorEvent.OutputObject
  >;
  getEvent(
    key: "DebugMint"
  ): TypedContractEvent<
    DebugMintEvent.InputTuple,
    DebugMintEvent.OutputTuple,
    DebugMintEvent.OutputObject
  >;
  getEvent(
    key: "DebugOwner"
  ): TypedContractEvent<
    DebugOwnerEvent.InputTuple,
    DebugOwnerEvent.OutputTuple,
    DebugOwnerEvent.OutputObject
  >;
  getEvent(
    key: "LynxMinted"
  ): TypedContractEvent<
    LynxMintedEvent.InputTuple,
    LynxMintedEvent.OutputTuple,
    LynxMintedEvent.OutputObject
  >;
  getEvent(
    key: "MaxMintableUpdated"
  ): TypedContractEvent<
    MaxMintableUpdatedEvent.InputTuple,
    MaxMintableUpdatedEvent.OutputTuple,
    MaxMintableUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SupplyVerified"
  ): TypedContractEvent<
    SupplyVerifiedEvent.InputTuple,
    SupplyVerifiedEvent.OutputTuple,
    SupplyVerifiedEvent.OutputObject
  >;

  filters: {
    "DebugCheckSupply(string,uint256,uint256,uint256,uint256)": TypedContractEvent<
      DebugCheckSupplyEvent.InputTuple,
      DebugCheckSupplyEvent.OutputTuple,
      DebugCheckSupplyEvent.OutputObject
    >;
    DebugCheckSupply: TypedContractEvent<
      DebugCheckSupplyEvent.InputTuple,
      DebugCheckSupplyEvent.OutputTuple,
      DebugCheckSupplyEvent.OutputObject
    >;

    "DebugConfirmMint(string,address,address,uint256,bool)": TypedContractEvent<
      DebugConfirmMintEvent.InputTuple,
      DebugConfirmMintEvent.OutputTuple,
      DebugConfirmMintEvent.OutputObject
    >;
    DebugConfirmMint: TypedContractEvent<
      DebugConfirmMintEvent.InputTuple,
      DebugConfirmMintEvent.OutputTuple,
      DebugConfirmMintEvent.OutputObject
    >;

    "DebugConstructor(address,address,address,address)": TypedContractEvent<
      DebugConstructorEvent.InputTuple,
      DebugConstructorEvent.OutputTuple,
      DebugConstructorEvent.OutputObject
    >;
    DebugConstructor: TypedContractEvent<
      DebugConstructorEvent.InputTuple,
      DebugConstructorEvent.OutputTuple,
      DebugConstructorEvent.OutputObject
    >;

    "DebugMint(string,uint256,uint256)": TypedContractEvent<
      DebugMintEvent.InputTuple,
      DebugMintEvent.OutputTuple,
      DebugMintEvent.OutputObject
    >;
    DebugMint: TypedContractEvent<
      DebugMintEvent.InputTuple,
      DebugMintEvent.OutputTuple,
      DebugMintEvent.OutputObject
    >;

    "DebugOwner(string,address,address)": TypedContractEvent<
      DebugOwnerEvent.InputTuple,
      DebugOwnerEvent.OutputTuple,
      DebugOwnerEvent.OutputObject
    >;
    DebugOwner: TypedContractEvent<
      DebugOwnerEvent.InputTuple,
      DebugOwnerEvent.OutputTuple,
      DebugOwnerEvent.OutputObject
    >;

    "LynxMinted(address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      LynxMintedEvent.InputTuple,
      LynxMintedEvent.OutputTuple,
      LynxMintedEvent.OutputObject
    >;
    LynxMinted: TypedContractEvent<
      LynxMintedEvent.InputTuple,
      LynxMintedEvent.OutputTuple,
      LynxMintedEvent.OutputObject
    >;

    "MaxMintableUpdated(uint256)": TypedContractEvent<
      MaxMintableUpdatedEvent.InputTuple,
      MaxMintableUpdatedEvent.OutputTuple,
      MaxMintableUpdatedEvent.OutputObject
    >;
    MaxMintableUpdated: TypedContractEvent<
      MaxMintableUpdatedEvent.InputTuple,
      MaxMintableUpdatedEvent.OutputTuple,
      MaxMintableUpdatedEvent.OutputObject
    >;

    "SupplyVerified(uint256,uint256,uint256,uint256)": TypedContractEvent<
      SupplyVerifiedEvent.InputTuple,
      SupplyVerifiedEvent.OutputTuple,
      SupplyVerifiedEvent.OutputObject
    >;
    SupplyVerified: TypedContractEvent<
      SupplyVerifiedEvent.InputTuple,
      SupplyVerifiedEvent.OutputTuple,
      SupplyVerifiedEvent.OutputObject
    >;
  };
}
