/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface LynxMinterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CLXY_TOKEN"
      | "HTS_PRECOMPILE"
      | "LYNX_TOKEN"
      | "SAUCE_TOKEN"
      | "associateTokens"
      | "burn"
      | "hts"
      | "mint"
      | "setMockHtsPrecompile"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "LynxBurned" | "LynxMinted"): EventFragment;

  encodeFunctionData(
    functionFragment: "CLXY_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HTS_PRECOMPILE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LYNX_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SAUCE_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "associateTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "hts", values?: undefined): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "setMockHtsPrecompile",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "CLXY_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "HTS_PRECOMPILE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LYNX_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SAUCE_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "associateTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMockHtsPrecompile",
    data: BytesLike
  ): Result;
}

export namespace LynxBurnedEvent {
  export type InputTuple = [
    user: AddressLike,
    lynxAmount: BigNumberish,
    hbarAmount: BigNumberish,
    sauceAmount: BigNumberish,
    clxyAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    lynxAmount: bigint,
    hbarAmount: bigint,
    sauceAmount: bigint,
    clxyAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    lynxAmount: bigint;
    hbarAmount: bigint;
    sauceAmount: bigint;
    clxyAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LynxMintedEvent {
  export type InputTuple = [
    user: AddressLike,
    lynxAmount: BigNumberish,
    hbarAmount: BigNumberish,
    sauceAmount: BigNumberish,
    clxyAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    lynxAmount: bigint,
    hbarAmount: bigint,
    sauceAmount: bigint,
    clxyAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    lynxAmount: bigint;
    hbarAmount: bigint;
    sauceAmount: bigint;
    clxyAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LynxMinter extends BaseContract {
  connect(runner?: ContractRunner | null): LynxMinter;
  waitForDeployment(): Promise<this>;

  interface: LynxMinterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CLXY_TOKEN: TypedContractMethod<[], [string], "view">;

  HTS_PRECOMPILE: TypedContractMethod<[], [string], "view">;

  LYNX_TOKEN: TypedContractMethod<[], [string], "view">;

  SAUCE_TOKEN: TypedContractMethod<[], [string], "view">;

  associateTokens: TypedContractMethod<[], [void], "nonpayable">;

  burn: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  hts: TypedContractMethod<[], [string], "view">;

  mint: TypedContractMethod<[amount: BigNumberish], [void], "payable">;

  setMockHtsPrecompile: TypedContractMethod<
    [mockHtsPrecompile: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CLXY_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "HTS_PRECOMPILE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LYNX_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SAUCE_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "associateTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hts"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<[amount: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "setMockHtsPrecompile"
  ): TypedContractMethod<
    [mockHtsPrecompile: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "LynxBurned"
  ): TypedContractEvent<
    LynxBurnedEvent.InputTuple,
    LynxBurnedEvent.OutputTuple,
    LynxBurnedEvent.OutputObject
  >;
  getEvent(
    key: "LynxMinted"
  ): TypedContractEvent<
    LynxMintedEvent.InputTuple,
    LynxMintedEvent.OutputTuple,
    LynxMintedEvent.OutputObject
  >;

  filters: {
    "LynxBurned(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      LynxBurnedEvent.InputTuple,
      LynxBurnedEvent.OutputTuple,
      LynxBurnedEvent.OutputObject
    >;
    LynxBurned: TypedContractEvent<
      LynxBurnedEvent.InputTuple,
      LynxBurnedEvent.OutputTuple,
      LynxBurnedEvent.OutputObject
    >;

    "LynxMinted(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      LynxMintedEvent.InputTuple,
      LynxMintedEvent.OutputTuple,
      LynxMintedEvent.OutputObject
    >;
    LynxMinted: TypedContractEvent<
      LynxMintedEvent.InputTuple,
      LynxMintedEvent.OutputTuple,
      LynxMintedEvent.OutputObject
    >;
  };
}
