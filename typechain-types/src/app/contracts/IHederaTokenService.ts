/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IHederaTokenService {
  export type HederaTokenStruct = {
    name: string;
    symbol: string;
    treasury: AddressLike;
    memo: string;
    supplyType: boolean;
    maxSupply: BigNumberish;
    freezeDefault: boolean;
    freezeKey: AddressLike[];
    wipeKey: AddressLike[];
    supplyKey: AddressLike[];
    adminKey: AddressLike[];
    kycKey: AddressLike[];
    decimals: BigNumberish;
  };

  export type HederaTokenStructOutput = [
    name: string,
    symbol: string,
    treasury: string,
    memo: string,
    supplyType: boolean,
    maxSupply: bigint,
    freezeDefault: boolean,
    freezeKey: string[],
    wipeKey: string[],
    supplyKey: string[],
    adminKey: string[],
    kycKey: string[],
    decimals: bigint
  ] & {
    name: string;
    symbol: string;
    treasury: string;
    memo: string;
    supplyType: boolean;
    maxSupply: bigint;
    freezeDefault: boolean;
    freezeKey: string[];
    wipeKey: string[];
    supplyKey: string[];
    adminKey: string[];
    kycKey: string[];
    decimals: bigint;
  };
}

export interface IHederaTokenServiceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "associateToken"
      | "balanceOf"
      | "burnToken"
      | "createToken"
      | "isSupplyKey"
      | "mintToken"
      | "transferToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "associateToken",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burnToken",
    values: [AddressLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createToken",
    values: [
      IHederaTokenService.HederaTokenStruct,
      BigNumberish,
      BigNumberish[],
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupplyKey",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintToken",
    values: [AddressLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToken",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "associateToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupplyKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferToken",
    data: BytesLike
  ): Result;
}

export interface IHederaTokenService extends BaseContract {
  connect(runner?: ContractRunner | null): IHederaTokenService;
  waitForDeployment(): Promise<this>;

  interface: IHederaTokenServiceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [token: AddressLike, owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  associateToken: TypedContractMethod<
    [account: AddressLike, token: AddressLike],
    [bigint],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [bigint],
    "view"
  >;

  burnToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, metadata: BytesLike[]],
    [bigint],
    "nonpayable"
  >;

  createToken: TypedContractMethod<
    [
      token: IHederaTokenService.HederaTokenStruct,
      initialTotalSupply: BigNumberish,
      keys: BigNumberish[],
      keyAddresses: AddressLike[]
    ],
    [[bigint, string] & { responseCode: bigint; tokenAddress: string }],
    "payable"
  >;

  isSupplyKey: TypedContractMethod<
    [token: AddressLike, supplyAddress: AddressLike],
    [boolean],
    "view"
  >;

  mintToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, metadata: BytesLike[]],
    [bigint],
    "nonpayable"
  >;

  transferToken: TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [token: AddressLike, owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "associateToken"
  ): TypedContractMethod<
    [account: AddressLike, token: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "burnToken"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, metadata: BytesLike[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createToken"
  ): TypedContractMethod<
    [
      token: IHederaTokenService.HederaTokenStruct,
      initialTotalSupply: BigNumberish,
      keys: BigNumberish[],
      keyAddresses: AddressLike[]
    ],
    [[bigint, string] & { responseCode: bigint; tokenAddress: string }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "isSupplyKey"
  ): TypedContractMethod<
    [token: AddressLike, supplyAddress: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintToken"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, metadata: BytesLike[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferToken"
  ): TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  filters: {};
}
