/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface NFTSaleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "PRICE_INCREMENT"
      | "batchGiveawayNFTs"
      | "currentTokenId"
      | "getCurrentPrice"
      | "getPurchaseState"
      | "giveawayNFT"
      | "hasPurchased"
      | "maxSupply"
      | "owner"
      | "price"
      | "purchaseNFT"
      | "resetContract"
      | "soldSupply"
      | "tokenAddress"
      | "treasury"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ContractReset"
      | "NFTSold"
      | "PaymentForwarded"
      | "PaymentReceived"
      | "PriceUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "PRICE_INCREMENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchGiveawayNFTs",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "currentTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPurchaseState",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "giveawayNFT",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPurchased",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "maxSupply", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchaseNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "soldSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "PRICE_INCREMENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchGiveawayNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPurchaseState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "giveawayNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPurchased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "soldSupply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
}

export namespace ContractResetEvent {
  export type InputTuple = [owner: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [owner: string, timestamp: bigint];
  export interface OutputObject {
    owner: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTSoldEvent {
  export type InputTuple = [buyer: AddressLike, serialNumber: BigNumberish];
  export type OutputTuple = [buyer: string, serialNumber: bigint];
  export interface OutputObject {
    buyer: string;
    serialNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentForwardedEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentReceivedEvent {
  export type InputTuple = [from: AddressLike, amount: BigNumberish];
  export type OutputTuple = [from: string, amount: bigint];
  export interface OutputObject {
    from: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceUpdatedEvent {
  export type InputTuple = [oldPrice: BigNumberish, newPrice: BigNumberish];
  export type OutputTuple = [oldPrice: bigint, newPrice: bigint];
  export interface OutputObject {
    oldPrice: bigint;
    newPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NFTSale extends BaseContract {
  connect(runner?: ContractRunner | null): NFTSale;
  waitForDeployment(): Promise<this>;

  interface: NFTSaleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PRICE_INCREMENT: TypedContractMethod<[], [bigint], "view">;

  batchGiveawayNFTs: TypedContractMethod<
    [recipients: AddressLike[]],
    [void],
    "nonpayable"
  >;

  currentTokenId: TypedContractMethod<[], [bigint], "view">;

  getCurrentPrice: TypedContractMethod<[], [bigint], "view">;

  getPurchaseState: TypedContractMethod<
    [buyer: AddressLike],
    [
      [boolean, bigint, bigint, bigint] & {
        purchased: boolean;
        nextToken: bigint;
        remaining: bigint;
        currentPrice: bigint;
      }
    ],
    "view"
  >;

  giveawayNFT: TypedContractMethod<
    [recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  hasPurchased: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  maxSupply: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  price: TypedContractMethod<[], [bigint], "view">;

  purchaseNFT: TypedContractMethod<[], [void], "payable">;

  resetContract: TypedContractMethod<[], [void], "nonpayable">;

  soldSupply: TypedContractMethod<[], [bigint], "view">;

  tokenAddress: TypedContractMethod<[], [string], "view">;

  treasury: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PRICE_INCREMENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "batchGiveawayNFTs"
  ): TypedContractMethod<[recipients: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "currentTokenId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPurchaseState"
  ): TypedContractMethod<
    [buyer: AddressLike],
    [
      [boolean, bigint, bigint, bigint] & {
        purchased: boolean;
        nextToken: bigint;
        remaining: bigint;
        currentPrice: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "giveawayNFT"
  ): TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hasPurchased"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "price"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "purchaseNFT"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "resetContract"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "soldSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ContractReset"
  ): TypedContractEvent<
    ContractResetEvent.InputTuple,
    ContractResetEvent.OutputTuple,
    ContractResetEvent.OutputObject
  >;
  getEvent(
    key: "NFTSold"
  ): TypedContractEvent<
    NFTSoldEvent.InputTuple,
    NFTSoldEvent.OutputTuple,
    NFTSoldEvent.OutputObject
  >;
  getEvent(
    key: "PaymentForwarded"
  ): TypedContractEvent<
    PaymentForwardedEvent.InputTuple,
    PaymentForwardedEvent.OutputTuple,
    PaymentForwardedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentReceived"
  ): TypedContractEvent<
    PaymentReceivedEvent.InputTuple,
    PaymentReceivedEvent.OutputTuple,
    PaymentReceivedEvent.OutputObject
  >;
  getEvent(
    key: "PriceUpdated"
  ): TypedContractEvent<
    PriceUpdatedEvent.InputTuple,
    PriceUpdatedEvent.OutputTuple,
    PriceUpdatedEvent.OutputObject
  >;

  filters: {
    "ContractReset(address,uint256)": TypedContractEvent<
      ContractResetEvent.InputTuple,
      ContractResetEvent.OutputTuple,
      ContractResetEvent.OutputObject
    >;
    ContractReset: TypedContractEvent<
      ContractResetEvent.InputTuple,
      ContractResetEvent.OutputTuple,
      ContractResetEvent.OutputObject
    >;

    "NFTSold(address,uint256)": TypedContractEvent<
      NFTSoldEvent.InputTuple,
      NFTSoldEvent.OutputTuple,
      NFTSoldEvent.OutputObject
    >;
    NFTSold: TypedContractEvent<
      NFTSoldEvent.InputTuple,
      NFTSoldEvent.OutputTuple,
      NFTSoldEvent.OutputObject
    >;

    "PaymentForwarded(address,uint256)": TypedContractEvent<
      PaymentForwardedEvent.InputTuple,
      PaymentForwardedEvent.OutputTuple,
      PaymentForwardedEvent.OutputObject
    >;
    PaymentForwarded: TypedContractEvent<
      PaymentForwardedEvent.InputTuple,
      PaymentForwardedEvent.OutputTuple,
      PaymentForwardedEvent.OutputObject
    >;

    "PaymentReceived(address,uint256)": TypedContractEvent<
      PaymentReceivedEvent.InputTuple,
      PaymentReceivedEvent.OutputTuple,
      PaymentReceivedEvent.OutputObject
    >;
    PaymentReceived: TypedContractEvent<
      PaymentReceivedEvent.InputTuple,
      PaymentReceivedEvent.OutputTuple,
      PaymentReceivedEvent.OutputObject
    >;

    "PriceUpdated(uint256,uint256)": TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
    PriceUpdated: TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
  };
}
